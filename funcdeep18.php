<p>1.Сделайте функцию, которая принимает строку на русском языке, а возвращает ее транслит.</p>
<?php

	//Думал делать на основаии форич, но не функция str_split не работала. Были проблемы с кодировкой, ромбики с ? выдавала. Сделал на strtr. Если не правильно, напишите, переделаю, с удовольствием))

	function getTranslit($str) {
	
	return strtr(mb_strtolower($str), ['а' => 'a', 'б' => 'b', 'в' => 'v', 'г' => 'g', 'д' => 'd', 'е' => 'e', 'ё' => 'e', 'ж' => 'zh', 'з' => 'z', 'и' => 'i', 'й' => 'y', 'к' => 'k', 'л' => 'l', 'м' => 'm', 'н' => 'n', 'о' => 'o', 'п' => 'p', 'р' => 'r', 'с' => 's', 'т' => 't', 'у' => 'u', 'ф' => 'f', 'х' => 'kh', 'ц' => 'ts', 'ч' => 'ch', 'ш' => 'sh', 'ъ' => '', 'ы' => 'y', 'ь' => '', 'э' => 'e', 'ю' => 'yu', 'я' => 'ya']);
	}
	
	echo getTranslit('Хоружий');
	
?>

<p>2.Сделайте функцию, которая возвращает множественное или единственное число существительного. Пример: 1 яблоко, 2 (3, 4) яблока, 5 яблок. Функция первым параметром принимает число, а следующие 3 параметра — форма для единственного числа, для чисел два, три, четыре и для чисел, больших четырех, например, func(3, 'яблоко', 'яблока', 'яблок').</p>

<?php

	//Яблок может быть больше 10 шт и тогда простая функция работать не будет. Пишу дополнительную фукнцию которая будет возвращать последнюю цифру из числа.
	
	function lastNum($num) {
		$arr = str_split($num, 1);
		return $arr[count($arr) - 1];
		}

	//echo lastNum(1);

	function nounForm ($num, $form1, $form234, $form5) {
		
		$form = '';
		
		if (lastNum($num) == 1) {
			$form = $form1;
			}
		if (lastNum($num) == 2 or $num == 3 or $num == 4) {
			$form = $form234;
			}
		if (lastNum($num) == 5) {
			$form = $form5;
			}
			
		return $num.' '.$form;
				
	}
	
	
	echo nounForm(1221, 'яблоко', 'яблока', 'яблок');
?>	
<p>3.Найдите все счастливые билеты. Счастливый билет - это билет, в котором сумма первых трех цифр его номера равна сумме вторых трех цифр его номера.</p>

<?php

	//Функция проверки билета на равенство сумм первой и второй части номера.
	function happyTicket($num) {
		//Делаю из числа массив.
		$arr = str_split($num, 1);
		//Разворачиваю массив для удобства получения 3 чисел.
		$arr = array_reverse($arr);
		
		//Сравниваю сумму первой и второй части.
		if ((array_sum(array_slice($arr, 0, 3))) == 
		($arrnum2 = array_sum(array_slice($arr, 3, 3)))) {
			return true;
			}
			else
			{
			return false;	
			}
	}

	//Формирую массив номеров билетов.
	$arrticket = range(1001, 999999);
	
	$arrhappy = [];
	
	//Вибираем из массива счастливые номера.
	foreach ($arrticket as $elem) {
		if (happyTicket($elem) == 1) {
			$arrhappy[] = $elem;
			}
	}
	
	
	echo "<pre>";
	print_r($arrhappy);
	echo "</pre>";
	
?>
<p>4.Дружественные числа - два различных числа, для которых сумма всех собственных делителей первого числа равна второму числу и наоборот, сумма всех собственных делителей второго числа равна первому числу.

Например, 220 и 284. Делители для 220 это 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 и 110, сумма делителей равна 284. Делители для 284 это 1, 2, 4, 71 и 142, их сумма равна 220.

Задача: найдите все пары дружественных чисел в промежутке от 1 до 10000. Для этого сделайте вспомогательную функцию, которая находит все делители числа и возвращает их в виде массива. Также сделайте функцию, которая параметром принимает массив, а возвращает его сумму.</p>

<?php

	/*Функция isEven() (even - это четный), параметром принимает целое число и проверяет: четное оно или нет. Если четное - пусть функция возвращает true, если нечетное - false.*/
	function isEven($num) {
		if ($num % 2 == 0) {
				return true;
			}
			else {
				return false;
			}
		}
	/*Дан массив с целыми числами. Создайте из него новый массив, где останутся лежать только четные из этих чисел. Для этого используйте вспомогательную функцию isEven.*/
	$arrrange = range(1, 10000);
	$arrbig = [];
	
	foreach ($arrrange as $elem) {
		if (isEven($elem)) {
			$arrbig[] = $elem;
		}
	}

	//Функция которая находит все делители числа и возвращает их в виде массива
	function getDivisors($num) {
			$arrbase = range(1, $num);
			$arrdiv = [];
			
			foreach ($arrbase as $divisors) {
			if ($divisors != 0 and $num % $divisors == 0 and $divisors != $num) {
				$arrdiv[] = $divisors;
				}
			}
			
			return $arrdiv;
			
		}
		
	//Функция суммирования элементов массива
	function sumArray($arr) {
		$sum = 0;
		foreach ($arr as $elem) {
			$sum = $sum + $elem;
			}
		return $sum;
		}
	
	$arrkey = [];
	
	
	
	//Создаем массив в котором ключ это число, а значение сумма делителей.
	foreach ($arrbig as $elem) {
			$arrkey[$elem] = sumArray(getDivisors($elem));
			}

	
	$secnum = 0;
	$sec = 0;
	$keysecnum = 0;
	$secnumdiv = 0;
	$result1 = [];
	
	
	foreach ($arrkey as $key => $elem) {
		//Ищем в массиве значение ключ и присваеваем его переменной $secnum.
		$secnum = $arrkey[$key];
		//Получаем сумму делителей этого числа.
		if (isEven($secnum) == 1) {
			$secnumdiv = sumArray(getDivisors($secnum));
			/*Если сумма делителей найденного числа равна ключу-числу.
			Выводим значение ключа и переменной $secnum.*/
			if ($secnumdiv == $key and $key != $elem and in_array($key, $result1) != 1) {
					$result1[$key] = $secnum;
					
				}
			}
		}

	echo "<pre>";
	//print_r(array_diff($result1, $result2));
	print_r($result1);
	echo "</pre>";			
	
?>
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	














	
	

